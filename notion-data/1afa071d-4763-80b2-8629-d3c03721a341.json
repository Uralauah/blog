{
  "object": "page",
  "id": "1afa071d-4763-80b2-8629-d3c03721a341",
  "created_time": "2025-03-07T02:02:00.000Z",
  "last_edited_time": "2025-04-11T06:59:00.000Z",
  "created_by": {
    "object": "user",
    "id": "b0f85a34-2514-4dd0-b3d5-0fe2d4483fd6"
  },
  "last_edited_by": {
    "object": "user",
    "id": "b0f85a34-2514-4dd0-b3d5-0fe2d4483fd6"
  },
  "cover": null,
  "icon": null,
  "parent": {
    "type": "database_id",
    "database_id": "00c159ee-4626-4a86-8d75-a9a02e229a3d"
  },
  "archived": false,
  "in_trash": false,
  "properties": {
    "태그": {
      "id": "T%5Cnr",
      "type": "multi_select",
      "multi_select": [
        {
          "id": "4768bae9-93de-4788-8237-416bf24413ea",
          "name": "코딩테스트",
          "color": "green"
        },
        {
          "id": "35bf0f0d-5958-4a89-841e-c1f524b7a72a",
          "name": "JAVA",
          "color": "pink"
        },
        {
          "id": "d40fc4d5-7962-4bbf-a366-7a9e7469728c",
          "name": "프로그래머스",
          "color": "orange"
        }
      ]
    },
    "게시일": {
      "id": "wOPZ",
      "type": "date",
      "date": {
        "start": "2025-03-07",
        "end": null,
        "time_zone": null
      }
    },
    "제목": {
      "id": "title",
      "type": "title",
      "title": [
        {
          "type": "text",
          "text": {
            "content": "카카오 프렌즈 컬러링북",
            "link": null
          },
          "annotations": {
            "bold": true,
            "italic": false,
            "strikethrough": false,
            "underline": false,
            "code": false,
            "color": "default"
          },
          "plain_text": "카카오 프렌즈 컬러링북",
          "href": null
        }
      ]
    }
  },
  "url": "https://www.notion.so/1afa071d476380b28629d3c03721a341",
  "public_url": null,
  "request_id": "c8c90b06-74a2-44ad-8590-63276dea61af",
  "blocks": [
    {
      "object": "block",
      "id": "1afa071d-4763-80b4-8ad8-fd113979f486",
      "parent": {
        "type": "page_id",
        "page_id": "1afa071d-4763-80b2-8629-d3c03721a341"
      },
      "created_time": "2025-03-07T02:02:00.000Z",
      "last_edited_time": "2025-03-07T02:02:00.000Z",
      "created_by": {
        "object": "user",
        "id": "b0f85a34-2514-4dd0-b3d5-0fe2d4483fd6"
      },
      "last_edited_by": {
        "object": "user",
        "id": "b0f85a34-2514-4dd0-b3d5-0fe2d4483fd6"
      },
      "has_children": false,
      "archived": false,
      "in_trash": false,
      "type": "code",
      "code": {
        "caption": [],
        "rich_text": [
          {
            "type": "text",
            "text": {
              "content": "import java.util.*;\n\nclass Solution {\n    public class Pixel{\n        private int x;\n        private int y;\n        \n        public Pixel(int x, int y){\n            this.x = x;\n            this.y = y;\n        }\n        \n        public int getX(){\n            return x;\n        }\n        \n        public int getY(){\n            return y;\n        }\n    }\n    \n    public int[][] dir = {{0,1},{1,0},{0,-1},{-1,0}};\n    \n    public int[] solution(int m, int n, int[][] picture) {\n        int numberOfArea = 0;\n        int maxSizeOfOneArea = 0;\n        \n        boolean[][] visited = new boolean[m][n];\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(picture[i][j]==0)\n                    visited[i][j] = true;\n            }\n        }\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(visited[i][j])\n                    continue;\n                \n                Queue<Pixel> q = new LinkedList<>();\n                q.offer(new Pixel(i,j));\n                int temp = 0;\n                \n                while(!q.isEmpty()){\n                    Pixel now = q.poll();\n                    \n                    for(int k=0;k<4;k++){\n                        int tx = now.getX() + dir[k][0];\n                        int ty = now.getY() + dir[k][1];\n                        \n                        if(tx<0||tx>=m||ty<0||ty>=n||visited[tx][ty]){\n                            continue;\n                        }\n                        \n                        if(picture[tx][ty]==picture[now.getX()][now.getY()]){\n                            q.offer(new Pixel(tx,ty));\n                            visited[tx][ty] = true;\n                            temp++;\n                        }\n                    }\n                }\n                numberOfArea++;\n                maxSizeOfOneArea = Math.max(maxSizeOfOneArea, temp);\n            }\n        }\n\n        int[] answer = new int[2];\n        answer[0] = numberOfArea;\n        answer[1] = maxSizeOfOneArea;\n        return answer;\n    }\n}",
              "link": null
            },
            "annotations": {
              "bold": false,
              "italic": false,
              "strikethrough": false,
              "underline": false,
              "code": false,
              "color": "default"
            },
            "plain_text": "import java.util.*;\n\nclass Solution {\n    public class Pixel{\n        private int x;\n        private int y;\n        \n        public Pixel(int x, int y){\n            this.x = x;\n            this.y = y;\n        }\n        \n        public int getX(){\n            return x;\n        }\n        \n        public int getY(){\n            return y;\n        }\n    }\n    \n    public int[][] dir = {{0,1},{1,0},{0,-1},{-1,0}};\n    \n    public int[] solution(int m, int n, int[][] picture) {\n        int numberOfArea = 0;\n        int maxSizeOfOneArea = 0;\n        \n        boolean[][] visited = new boolean[m][n];\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(picture[i][j]==0)\n                    visited[i][j] = true;\n            }\n        }\n        \n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(visited[i][j])\n                    continue;\n                \n                Queue<Pixel> q = new LinkedList<>();\n                q.offer(new Pixel(i,j));\n                int temp = 0;\n                \n                while(!q.isEmpty()){\n                    Pixel now = q.poll();\n                    \n                    for(int k=0;k<4;k++){\n                        int tx = now.getX() + dir[k][0];\n                        int ty = now.getY() + dir[k][1];\n                        \n                        if(tx<0||tx>=m||ty<0||ty>=n||visited[tx][ty]){\n                            continue;\n                        }\n                        \n                        if(picture[tx][ty]==picture[now.getX()][now.getY()]){\n                            q.offer(new Pixel(tx,ty));\n                            visited[tx][ty] = true;\n                            temp++;\n                        }\n                    }\n                }\n                numberOfArea++;\n                maxSizeOfOneArea = Math.max(maxSizeOfOneArea, temp);\n            }\n        }\n\n        int[] answer = new int[2];\n        answer[0] = numberOfArea;\n        answer[1] = maxSizeOfOneArea;\n        return answer;\n    }\n}",
            "href": null
          }
        ],
        "language": "java"
      },
      "blocks": []
    }
  ]
}